namespace = wc_first_contact_events

# 0001 - A ruler sends their regards, letter
# 0001 - Choosing your stance
# 0002 - A ruler sends their regards, in person 

# A ruler sends their regards via letter
wc_first_contact_events.0001 = {
    content_source = dlc_GOA
    type = letter_event
	opening = {
		desc = {
            random_valid = {
                triggered_desc = {
                    trigger = {
                        scope:sender = { first_contact_letter_flirty_trigger = yes }
                    }
                    desc = wc_first_contact_events.0001.opening_flirty
                }
                triggered_desc = {
                    trigger = {
                        scope:sender = { first_contact_letter_flirty_trigger = yes }
                    }
                    desc = wc_first_contact_events.0001.opening_flirty_2
                }
                triggered_desc = {
                    trigger = {
                        scope:sender = { first_contact_letter_educated_trigger = yes }
                    }
                    desc = wc_first_contact_events.0001.opening_fancy
                }
                triggered_desc = {
                    trigger = {
                        scope:sender.faith = root.faith
                    }
                    desc = wc_first_contact_events.0001.opening_same_faith
                }
                desc = wc_first_contact_events.0001.opening_1
                desc = wc_first_contact_events.0001.opening_2
                desc = wc_first_contact_events.0001.opening_3
            }
        }
	}
    desc = {
        # Introducing them + primary title
        random_valid = {
            desc = wc_first_contact_events.0001.desc_intro_1
            triggered_desc = {
                trigger = {
                    scope:sender = { first_contact_de_isolation_trigger = yes }
                }
                desc = wc_first_contact_events.0001.desc_intro_2
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { first_contact_de_isolation_trigger = yes }
                }
                desc = wc_first_contact_events.0001.desc_intro_3
            }
            desc = wc_first_contact_events.0001.desc_intro_4
            desc = wc_first_contact_events.0001.desc_intro_5
            triggered_desc = {
                trigger = {
                    scope:sender = { 
                        OR = {
                            has_trait = zealous 
                            piety_level >= 3
                        }
                    }
                }
                desc = wc_first_contact_events.0001.desc_intro_pious
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { has_trait = arrogant }
                }
                desc = wc_first_contact_events.0001.desc_intro_arrogant
            }
        }
        desc = wc_first_contact_events.0001.desc_newline
        # Their region
        random_valid = {
            # Neighbors
            triggered_desc = {
                trigger = {
                    ruler_realm_is_on_same_continent_trigger = { CHARACTER = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_region_neighbor_1
            }
            triggered_desc = {
                trigger = {
                    ruler_realm_is_on_same_continent_trigger = { CHARACTER = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_region_neighbor_2
            }
            triggered_desc = {
                trigger = {
                    ruler_realm_is_on_same_continent_trigger = { CHARACTER = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_region_neighbor_3
            }
            # Broken Isles
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_broken_isles } }
                }
                desc = wc_first_contact_events.0001.desc_region_broken_isles
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_broken_isles } }
                }
                desc = wc_first_contact_events.0001.desc_region_broken_isles_2
            }
            # Northrend
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_northrend } }
                }
                desc = wc_first_contact_events.0001.desc_region_northrend
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_northrend } }
                }
                desc = wc_first_contact_events.0001.desc_region_northrend_2
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_northrend } }
                }
                desc = wc_first_contact_events.0001.desc_region_northrend_3
            }
            # Eastern Kingdoms
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_eastern_kingdoms } }
                }
                desc = wc_first_contact_events.0001.desc_region_eastern_kingdoms
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_eastern_kingdoms } }
                }
                desc = wc_first_contact_events.0001.desc_region_eastern_kingdoms_2
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_eastern_kingdoms } }
                }
                desc = wc_first_contact_events.0001.desc_region_eastern_kingdoms_3
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_eastern_kingdoms } }
                }
                desc = wc_first_contact_events.0001.desc_region_eastern_kingdoms_4
            }
            # Pandaria
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_pandaria } }
                }
                desc = wc_first_contact_events.0001.desc_region_pandaria
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_pandaria } }
                }
                desc = wc_first_contact_events.0001.desc_region_pandaria_2
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_pandaria } }
                }
                desc = wc_first_contact_events.0001.desc_region_pandaria_3
            }
            # Kalimdor
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_kalimdor } }
                }
                desc = wc_first_contact_events.0001.desc_region_kalimdor
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_kalimdor } }
                }
                desc = wc_first_contact_events.0001.desc_region_kalimdor_2
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { capital_province = { geographical_region = world_kalimdor } }
                }
                desc = wc_first_contact_events.0001.desc_region_kalimdor_3
            }
            desc = wc_first_contact_events.0001.desc_region_1
            triggered_desc = {
                trigger = {
                    NOT = { ruler_realm_is_on_same_continent_trigger = { CHARACTER = scope:sender } }
                }
                desc = wc_first_contact_events.0001.desc_region_2
            }
            triggered_desc = {
                trigger = {
                    NOT = { ruler_realm_is_on_same_continent_trigger = { CHARACTER = scope:sender } }
                }
                desc = wc_first_contact_events.0001.desc_region_3
            }
        }
        random_valid = {
            triggered_desc = {
                trigger = {
                    first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_friendly_1
            }
            triggered_desc = {
                trigger = {
                    first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_friendly_2
            }
            triggered_desc = {
                trigger = {
                    first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_friendly_3
            }
            triggered_desc = {
                trigger = {
                    first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_friendly_4
            }
            triggered_desc = {
                trigger = {
                    first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_friendly_5
            }
            triggered_desc = {
                trigger = {
                    first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_friendly_6
            }
            triggered_desc = {
                trigger = {
                    first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_friendly_7
            }
            triggered_desc = {
                trigger = {
                    scope:sender = { first_contact_de_isolation_trigger = yes }
                    first_contact_neutral_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_neutral_1
            }
            triggered_desc = {
                trigger = {
                    first_contact_neutral_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_neutral_2
            }
            triggered_desc = {
                trigger = {
                    first_contact_neutral_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_neutral_3
            }
            triggered_desc = {
                trigger = {
                    first_contact_neutral_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_neutral_4
            }
            triggered_desc = {
                trigger = {
                    first_contact_neutral_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_neutral_5
            }
            triggered_desc = {
                trigger = {
                    first_contact_neutral_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_neutral_6
            }
            triggered_desc = {
                trigger = {
                    first_contact_hostile_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_hostile_1
            }
            triggered_desc = {
                trigger = {
                    first_contact_hostile_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_hostile_2
            }
            triggered_desc = {
                trigger = {
                    first_contact_hostile_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_hostile_3
            }
            triggered_desc = {
                trigger = {
                    first_contact_hostile_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_hostile_4
            }
            triggered_desc = {
                trigger = {
                    first_contact_hostile_stance_of_reverse_trigger = { target = scope:sender }
                }
                desc = wc_first_contact_events.0001.desc_outro_hostile_5
            }
            triggered_desc = {
                trigger = {
                    first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
                    scope:sender = { first_contact_letter_flirty_trigger = yes }
                }
                desc = wc_first_contact_events.0001.desc_outro_friendly_flirty
            }
            triggered_desc = {
                trigger = {
                    first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
                    scope:sender = { has_trait_extroverted_trigger = yes }
                }
                desc = wc_first_contact_events.0001.desc_outro_friendly_extroverted
            }
        }
    }

    immediate = {
        save_scope_as = reciever
        add_prestige = 10
        if = {
            limit = {
                first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
            }
            custom_tooltip = first_contact_friendly_effects
        }
        if = {
            limit = {
                first_contact_neutral_stance_of_reverse_trigger = { target = scope:sender }
            }
            custom_tooltip = first_contact_neutral_effects_tt_2
        }
        if = {
            limit = {
                first_contact_hostile_stance_of_reverse_trigger = { target = scope:sender }
            }
            custom_tooltip = first_contact_hostile_effects
            scope:sender = {
                random_held_title = {
                    limit = {
                        tier = tier_county
                        root = { NOT = { has_claim_on = prev } }
                    }
                    save_scope_as = target_county
                }
            }
            random_held_title = {
                limit = {
                    tier = tier_county
                    scope:sender = { NOT = { has_claim_on = prev } }
                }
                save_scope_as = my_county
            }
        }
    }

    sender = scope:sender

    option = { # I'll be nice
        name = {
            text = {
                random_valid = {
                    triggered_desc = {
                        trigger = {
                            first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
                        }
                        desc = wc_first_contact_events.0001.friendly_mutual
                    }
                    desc = wc_first_contact_events.0001.friendly
                    desc = wc_first_contact_events.0001.friendly_2
                    desc = wc_first_contact_events.0001.friendly_3
                }
            }
        }
    
        custom_tooltip = wc_first_contact_events.0001.friendly_tt

        hidden_effect = {
            send_friendly_stance_effect = { TARGET = scope:sender ORDER = none }
        }

        if = {
            limit = {
                first_contact_friendly_stance_of_reverse_trigger = { target = scope:sender }
            }
            add_truce_both_ways = {
                character = scope:sender
                years = 1
                name = TRUCE_DIPLOMATIC
            }
        }

        scope:sender = {
            send_interface_toast = {
                title = wc_first_contact_events.0001.friendly_toast
                type = event_toast_effect_good
                left_icon = root
                right_icon = scope:sender
                show_as_tooltip = {
                    root = {
                        add_opinion = {
                            target = scope:sender
                            modifier = good_first_contact_opinion
                        }
                    }
                }
                hidden_effect = {
                    if = {
                        limit = {
                            first_contact_friendly_stance_of_trigger = { target = root }
                        }
                        show_as_tooltip = {
                            add_truce_both_ways = {
                                character = scope:sender
                                years = 1
                                name = TRUCE_DIPLOMATIC
                            }
                        }
                    }
                }
            }
        }

        stress_impact = {
            compassionate = minor_stress_impact_loss
            shy = minor_stress_impact_gain
            gregarious = minor_stress_impact_loss
        }

        ai_chance = {
            base = 100
            wc_friendly_first_contact_modifier = {
                CHARACTER = scope:sender
            }
        }
    }

    option = { # Okay 
        name = {
            text = {
                random_valid = {
                    triggered_desc = {
                        trigger = {
                            first_contact_neutral_stance_of_reverse_trigger = { target = scope:sender }
                        }
                        desc = wc_first_contact_events.0001.neutral_mutual
                    }
                    desc = wc_first_contact_events.0001.neutral
                    desc = wc_first_contact_events.0001.neutral_2
                    desc = wc_first_contact_events.0001.neutral_3
                    desc = wc_first_contact_events.0001.neutral_4
                }
            }
        }

        custom_tooltip = wc_first_contact_events.0001.neutral_tt

        hidden_effect = {
            send_neutral_stance_effect = { TARGET = scope:sender ORDER = none }
        }

        if = {
            limit = {
                first_contact_neutral_stance_of_reverse_trigger = { target = scope:sender }
            }
            custom_tooltip = neutral_both_tt
        }
        
        scope:sender = {
            send_interface_toast = {
                title = wc_first_contact_events.0001.neutral_toast
                type = event_toast_effect_neutral
                left_icon = root
                right_icon = scope:sender
                show_as_tooltip = {
                    root = {
                        add_opinion = {
                            target = scope:sender
                            modifier = neutral_first_contact_opinion
                        }
                    }
                }
            }
        }

        stress_impact = {
            paranoid = minor_stress_impact_loss
            shy = minor_stress_impact_loss
        }
        
        ai_chance = {
            base = 100
            wc_neutral_first_contact_modifier = {
                CHARACTER = scope:sender
            }
        }
    }

    option = { # NAUURR
        name = {
            text = {
                random_valid = {
                    triggered_desc = {
                        trigger = {
                            first_contact_hostile_stance_of_reverse_trigger = { target = scope:sender }
                        }
                        desc = wc_first_contact_events.0001.hostile_mutual
                    }
                    desc = wc_first_contact_events.0001.hostile
                    desc = wc_first_contact_events.0001.hostile_2
                    desc = wc_first_contact_events.0001.hostile_3
                    desc = wc_first_contact_events.0001.hostile_4
                    desc = wc_first_contact_events.0001.hostile_5
                }
            }
        }

        custom_tooltip = wc_first_contact_events.0001.hostile_tt

        hidden_effect = {
            send_hostile_stance_effect = { TARGET = scope:sender ORDER = none }
        }

        if = {
            limit = {
                first_contact_hostile_stance_of_reverse_trigger = { target = scope:sender }
                exists = scope:my_county
                exists = scope:target_county
            }
            scope:sender = {
                add_unpressed_claim = scope:my_county
            } 
            add_unpressed_claim = scope:target_county
        }

        scope:sender = {
            send_interface_toast = {
                title = wc_first_contact_events.0001.hostile_toast
                type = event_toast_effect_bad
                left_icon = root
                right_icon = scope:sender
                show_as_tooltip = {
                    root = {
                        add_opinion = {
                            target = scope:sender
                            modifier = bad_first_contact_opinion
                        }
                    }
                }
            }
        }
        
        ai_chance = {
            base = 100
            wc_hostile_first_contact_modifier = {
                CHARACTER = scope:sender
            }
        }
    }
}